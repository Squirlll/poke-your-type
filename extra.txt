<!-- dropdown select grass -->
                <form class = 'bg-body-secondary'>
                    <!-- list attrb connects to datalist with same id; will render dropdown list of recommended names to search -->
                    <input list="grass-list" type="text" placeholder="Favorite Grass-type">
                    <!-- for dropdown recs/autocomplete -->
                    <datalist id="grass-list"></datalist>
                </form>


//GET NAMES AND SORT THEM BY TYPES
function fetchPokemon() {

  let pokemonByType = {}
  let fetchCount = 0
  //https://pokeapi.co/api/v2/type/: array[0-17] are the types; photo in images folder
  for (let id = 1; id <= 18; id++) {
    let url = `https://pokeapi.co/api/v2/type/${id}`;
    fetch(url)
      .then(response => response.json())
      .then(data => {
        //we fetch each type's url id, each url id contains type name and all the pokemon in that type.
        //type/id produces data. data.name shows type. data.pokemon show all pokemon
        // console.log(data.pokemon[1])
        let typeArray = []
        for (let i = 0; i < data.pokemon.length; i++) {
          // typeArray.push(data.pokemon[i].pokemon.name)
          typeArray.push(data.pokemon[i].pokemon.name)

        }//ends for loop

        //by each url id, i log an array of all pokemon in that url id/type.
        //So this inner loop makes one array, but the outer for loop repeats the process fot each url, so when we log it, we will see each array from each url (stored in typeArray).
        // Then we store all of these arrays in one object

        pokemonByType[id] = typeArray;
        fetchCount++;

        for (i = 1; i <= 18; i++) {
          if (fetchCount === 18) {
            console.log(pokemonByType[i].join(','))
            //logs all names by type
          }
        }
      })//ends .thendata
  }//ends id for loop
}//ends fetchPokemon fn

// fetchPokemon();


//open new window with final card html
const button = document.querySelector('button');
button.addEventListener('click', (event) => {
  event.preventDefault();
  
  const userCard = document.getElementById('user-card');
  const width = userCard.offsetWidth;
  const height = userCard.offsetHeight;
  const fileName = 'card.png';

  const printWindow = window.open('', '_blank');
  const printDocument = printWindow.document;

  // Copy necessary styles and dependencies to the new document
  const stylesheets = document.querySelectorAll('link[rel="stylesheet"]');
  stylesheets.forEach((stylesheet) => {
    const newStylesheet = printDocument.createElement('link');
    newStylesheet.rel = 'stylesheet';
    newStylesheet.href = stylesheet.href;
    printDocument.head.appendChild(newStylesheet);
  });

  // Create a new div element and append the userCard element
  const newDiv = printDocument.createElement('div');
  newDiv.innerHTML = userCard.outerHTML;
  printDocument.body.appendChild(newDiv);

  // Wait for the content to be loaded in the new window
  printWindow.addEventListener('DOMContentLoaded', () => {
    setTimeout(() => {
      // Set the print styles for the new window
      const printStyles = printDocument.createElement('style');
      printStyles.innerHTML = `
        @media print {
          body {
            margin: 0;
          }
          #user-card {
            width: ${width}px;
            height: ${height}px;
          }
        }
      `;
      printDocument.head.appendChild(printStyles);

      // Trigger the print dialog in the new window
      printWindow.print();

      // Close the new window after the print dialog is closed
      printWindow.addEventListener('afterprint', () => {
        printWindow.close();
      });
    }, 100);
  });
});